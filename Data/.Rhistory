print.level = -1
),silent=FALSE)
if(class(out.eb)=="try-error"){
cat("EB did not converge in sims",i,"\n")
}
out.eb <- try(ebalance(
Treatment=W,
X=X,
print.level = -1
),silent=FALSE)
if(class(out.eb)=="try-error"){
cat("EB did not converge in sims",i,"\n")
}
out.eb
length(out.eb$w)
# entropy balancing
out.eb <- try(ebalance(
Treatment=W,
X=X,
print.level = -1
),silent=FALSE)
if(class(out.eb)=="try-error"){
cat("EB did not converge in sims",i,"\n")
} else {
d <- out.eb$w
est.st[i,"EB"]  <- mean(Y[W==1]) - (sum(Y[W==0]*d)/sum(d))
}
ls()
est.summ
load("~/Documents/ModelMatch/Data/simulation1.Rdata")
est.summ
mse
load("~/Documents/ModelMatch/Data/simulation2.Rdata")
ls()
rm(list=ls())
load("~/Documents/ModelMatch/Data/simulation2.Rdata")
ls()
est.summ
mse
load("~/Documents/ModelMatch/Data/simulation3.Rdata")
est.summ
rm(list=ls())
library(Matching)
library(MASS)
library(ebal)
library(devtools)
library(ModelMatch)
## Setup
sims <- 100
n    <- 5000
# X1-X3 multivariate normal with variances 2, 1, 1 and covars 1, -1, -.5
vars   <- c(2,1,1)
covars <- c(1,-1,-.5)
mu     <- c(0,0,0)
Sigma <- diag(vars)
Sigma[2,1] <- Sigma[1,2] <- covars[1]
Sigma[3,1] <- Sigma[1,3] <- covars[2]
Sigma[3,2] <- Sigma[2,3] <- covars[3]
# pick target sample size
#nsim <- 1500
nsim <- 600
#nsim  <- 300
big.est.store <- big.para.store <- list()
tr <- nsim/2; tr
co <- nsim - tr; co
para  <- c("FracCtoT","N","tr","co","corY.PS","corW.PS","corW.MM","corPS.PS1","corPS.PS2","corPS.PS3")
est    <- c("RAW","MM","MMTest","GM","PS1","PS2","PS3","PSW1","PSW2","PSW3","EB")
# expand storage for three different outcomes
est.store <- para.store <- list()
for(k in 1:3){
est.store[[k]]   <- matrix(NA,sims,length(est), dimnames = list(c(), est))
para.store[[k]]  <- matrix(NA,sims,length(para), dimnames = list(c(), para))
}
names(est.store) <- names(para.store) <- c("Y1","Y2","Y3")
i=1
X13 <- mvrnorm(n,mu=mu,Sigma=Sigma, empirical = F)
X1 <- X13[,1]
X2 <- X13[,2]
X3 <- X13[,3]
X4 <- runif(n,-3,3)
X5 <- rchisq(n, df=1)
X6 <- rbinom(n,size=1,prob=.5)
# compute errors and rescale to mean .5 and var 67.6
e <- rchisq(n, df = 5, ncp = 0)
findconst <- function(cc,e){abs(var(e*cc)-67.6)}
out <- optimize(findconst,lower=1,upper=67,e=e)
e <- e*out$minimum
e <- e-(mean(e)-.5)
xb <- X1 + 2*X2 - 2*X3  - X4 - .5*X5 + X6 +  e
W  <- as.numeric(xb>0)
sim.dat <- data.frame(W,X1,X2,X3,X4,X5,X6)
tr.keep <- sample(which(sim.dat$W==1),tr,replace=F)
co.keep <- sample(which(sim.dat$W==0),co,replace=F)
sim.dat <- sim.dat[c(tr.keep,co.keep),]
W <- sim.dat[,"W"]
X <- as.matrix(sim.dat[,names(sim.dat)[-1]])
X1 <- X[,"X1"]; X2 <- X[,"X2"]; X3 <- X[,"X3"]; X4 <- X[,"X4"]; X5 <- X[,"X5"];X6 <- X[,"X6"]
# true linear propensity scores
PS.out  <- glm(W~X,family=binomial(link = "probit"))
PS.true <- PS.out$fitted
psxlist <- pslist <- list()
# ps 1
formula.PS1 <- formula(W~X1+X2+X3+X4+X5+X6)
psxlist[[1]] <- model.matrix(formula.PS1)[,-1]
# ps 2
formula.PS2  <- formula(W~I(X1^2)+I(X2^2)+X3+I(X4^2)+I(X5^2)+X6)
psxlist[[2]] <- model.matrix(formula.PS2)[,-1]
# ps 3
formula.PS3  <- formula(W~I(X1*X3)+I(X2^2)+X4+X5+X6)
psxlist[[3]] <- model.matrix(formula.PS3)[,-1]
# PS estimation
for(p in 1:3){
pslist[[p]] <- glm(W~psxlist[[p]],family=binomial(link = "probit"))
}
# outcome: treatment effect is zero
u  <- rnorm(nrow(X))
# ouctome 1 (linear)
Y1 <- X1 + X2 + X3 - X4 + X5 + X6 + u
# outcome 2 (medium nonlinear)
Y2 <- X1 + X2 + 0.2*X3*X4 - sqrt(X5) + u
# outcome 3 (strongly nonlinear)
Y3 <- (X1 + X2 + X5)^2 + u
# combine
Y.mat <- cbind(Y1,Y2,Y3)
# raw outcome
k=1
Y <- Y.mat[,k]
mm <- lm(Y~X)
pred <- mm$fitted; resid <- mm$resid
mm
summary(mm)
pairs <- Matches(W, pred)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
est.store[[k]][i,"MM"] <- mm_res[[1]]/tr
est.store[[k]][i,"MMTest"] <- ifelse(mm_res[[3]][3]<= 0.05, est.store[[k]][i,"MM"], 0)
mm_res
k=2
Y <- Y.mat[,k]
mm <- lm(Y~X)
pred <- mm$fitted; resid <- mm$resid
pairs <- Matches(W, pred)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
mm_res
summary(mm)
k=3
Y <- Y.mat[,k]
mm <- lm(Y~X)
pred <- mm$fitted; resid <- mm$resid
pairs <- Matches(W, pred)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
mm_res
plot(Y,pred)
hist(y)
hist(Y)
plot(Y,pred)
plot(Y,pred,col=W)
plot(Y,pred,col=W+1)
plot(Y,pred,col=W+2)
hist(xb)
hist(PS.true,by=W)
by(W, hist(PS.true))
?by
by(PS.true, W, hist)
par(mfrow=c(2,1))
by(PS.true, W, hist)
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("ks", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("ipred", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?bagging
library(ipred)
data("BostonHousing", package = "mlbench")
ls()
dim(BostonHousing)
str(BostonHousing)
head(BostonHousing)
mod <- bagging(medv ~ ., data=BostonHousing, coob=TRUE)
print(mod)
library("mlbench")
learn <- as.data.frame(mlbench.friedman1(200))
learn
mod <- bagging(y ~ ., data=learn, coob=TRUE)
print(mod)
rm(list=ls())
sims <- 100
n    <- 5000
# X1-X3 multivariate normal with variances 2, 1, 1 and covars 1, -1, -.5
vars   <- c(2,1,1)
covars <- c(1,-1,-.5)
mu     <- c(0,0,0)
Sigma <- diag(vars)
Sigma[2,1] <- Sigma[1,2] <- covars[1]
Sigma[3,1] <- Sigma[1,3] <- covars[2]
Sigma[3,2] <- Sigma[2,3] <- covars[3]
# pick target sample size
#nsim <- 1500
nsim <- 600
#nsim  <- 300
big.est.store <- big.para.store <- list()
tr <- nsim/2; tr
co <- nsim - tr; co
X13 <- mvrnorm(n,mu=mu,Sigma=Sigma, empirical = F)
X1 <- X13[,1]
X2 <- X13[,2]
X3 <- X13[,3]
X4 <- runif(n,-3,3)
X5 <- rchisq(n, df=1)
X6 <- rbinom(n,size=1,prob=.5)
# compute errors and rescale to mean .5 and var 67.6
e <- rchisq(n, df = 5, ncp = 0)
findconst <- function(cc,e){abs(var(e*cc)-67.6)}
out <- optimize(findconst,lower=1,upper=67,e=e)
e <- e*out$minimum
e <- e-(mean(e)-.5)
xb <- X1 + 2*X2 - 2*X3  - X4 - .5*X5 + X6 +  e
W  <- as.numeric(xb>0)
# sample to target sizes
sim.dat <- data.frame(W,X1,X2,X3,X4,X5,X6)
tr.keep <- sample(which(sim.dat$W==1),tr,replace=F)
co.keep <- sample(which(sim.dat$W==0),co,replace=F)
sim.dat <- sim.dat[c(tr.keep,co.keep),]
W <- sim.dat[,"W"]
X <- as.matrix(sim.dat[,names(sim.dat)[-1]])
X1 <- X[,"X1"]; X2 <- X[,"X2"]; X3 <- X[,"X3"]; X4 <- X[,"X4"]; X5 <- X[,"X5"];X6 <- X[,"X6"]
# outcome: treatment effect is zero
u  <- rnorm(nrow(X))
# ouctome 1 (linear)
Y1 <- X1 + X2 + X3 - X4 + X5 + X6 + u
# outcome 2 (medium nonlinear)
Y2 <- X1 + X2 + 0.2*X3*X4 - sqrt(X5) + u
# outcome 3 (strongly nonlinear)
Y3 <- (X1 + X2 + X5)^2 + u
# combine
Y.mat <- cbind(Y1,Y2,Y3)
# Test set error (nbagg=25, trees pruned): 3.41 (Breiman, 1996a, Table 8)
mod <- bagging(medv ~ ., data=BostonHousing, coob=TRUE)
k=1
Y <- Y.mat[,k]
mm <- lm(Y~X)
mod <- bagging(Y ~ X, coob=TRUE)
print(mod)
pred <- mm$fitted; resid <- mm$resid
pred2 <- mod$fitted; resid2 <- mod$resid
mod <- bagging(Y, X, coob=TRUE)
mod <- bagging(Y, as.data.frame(X), coob=TRUE)
mod <- bagging(Y, X= as.data.frame(X), coob=TRUE)
mod <- bagging(Y~., data=modmatrix, coob=TRUE)
modmatrix <- cbind(Y,X)
mod <- bagging(Y~., data=modmatrix, coob=TRUE)
class(modmatrix)
modmatrix <- data.frame(Y,X)
mod <- bagging(Y~., data=modmatrix, coob=TRUE)
print(summary(mm)); print(mod)
mm$rmse
mm$mse
attributes(mm)
rmse(mm)
mse(mm)
mod
summary(mod)
sum(mm$fitted^2)
sum(mm$resid^2)
mean(mm$resid^2)
print(summary(mm)); cat("linear model rmse:", mean(mm$resid^2)) print(mod)
print(summary(mm)); cat("linear model rmse:", mean(mm$resid^2)); print(mod)
print(summary(mm)); cat("linear model rmse:", mean(mm$resid^2), "\n"); print(mod)
cat("linear model rmse:", mean(mm$resid^2), "\n"); print(mod)
pred <- mm$fitted; resid <- mm$resid
pred2 <- mod$fitted; resid2 <- mod$resid
pairs <- Matches(W, pred)
pairs2 <- Matches(W, pred2)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
pred2
mod
mod$fitted
attributes(mod)
predict(mod, X)
predict(mod, X)-Y
pred2 <- predict(mod,X); resid2 <- pred2-Y
pairs <- Matches(W, pred)
pairs2 <- Matches(W, pred2)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
mod_res <- permu_test_mean(pairs2, pred2, Y, iters=1000)
mm_res
mod_res
k=2
Y <- Y.mat[,k]
mm <- lm(Y~X)
modmatrix <- data.frame(Y,X)
mod <- bagging(Y~., data=modmatrix, coob=TRUE)
cat("linear model rmse:", mean(mm$resid^2), "\n"); print(mod)
pred <- mm$fitted; resid <- mm$resid
pred2 <- predict(mod,X); resid2 <- pred2-Y
pairs <- Matches(W, pred)
pairs2 <- Matches(W, pred2)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
mod_res <- permu_test_mean(pairs2, pred2, Y, iters=1000)
mm_res
mod_res
mm_res
-66/300
-9/300
k=3
Y <- Y.mat[,k]
mm <- lm(Y~X)
modmatrix <- data.frame(Y,X)
mod <- bagging(Y~., data=modmatrix, coob=TRUE)
cat("linear model rmse:", mean(mm$resid^2), "\n"); print(mod)
pred <- mm$fitted; resid <- mm$resid
pred2 <- predict(mod,X); resid2 <- pred2-Y
pairs <- Matches(W, pred)
pairs2 <- Matches(W, pred2)
mm_res <- permu_test_mean(pairs, pred, Y, iters=1000)
mod_res <- permu_test_mean(pairs2, pred2, Y, iters=1000)
mm_res
mod_res
library(ggplot2)
est.summ
rm(list=ls())
load("~/Documents/ModelMatch/Data/simulation1.Rdata")
est.summ
est.store
est.st
p <- ggplot(est.store)
p <- ggplot(est.store[[1]])
p <- ggplot(as.data.frame(est.store[[1]]))
p+geom_boxplot()
geom_boxplot(data=est.store[[1]])
geom_boxplot(as.data.frame(data=est.store[[1]]))
temp <- est.store[[1]]
vector(temp)
as.vector(temp)
temp[100,]
temp[99,]
library(reshape)
melt(temp)
temp <- melt(temp)
temp <- est.store[[1]]
temp <- melt(temp)
head(temp)
p <- ggplot(temp, aes(x=X2, y=value))
p+geom_boxplot()
?qplot
dat <- data.frame()
dat <- data.frame()
for(i in 1:3){
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- rep(i,100)
dat <- rbind(temp,dat)
}
dat
dim(dat)
dat
rm(dat)
dat <- data.frame()
for(i in 1:3){
temp
rm(temp)
temp <- est.store[[i]]
temp <- melt(temp)
temp
temp[,1] <- rep(i,100)
temp
dat <- rbind(temp,dat)
dat
i=1
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- rep(i,100)
temp
dat <- rbind(temp,dat)
dat
dim(dat)
dim(temp)
head(dat)
dat <- data.frame()
for(i in 1:3){
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- rep(i,100)
dat <- rbind(temp,dat)
}
dim(dat)
head(dat)
tail(dat)
p
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~.)
dat <- data.frame()
for(i in 1:3){
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- paste("Outcome", i)
dat <- rbind(temp,dat)
}
p <- ggplot(temp, aes(x=X2, y=value))
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~.)
list.files()
setwd("Documents/ModelMatch/Data")
list.files()
dat <- data.frame()
fin <- paste("simulation1.Rdata","simulation2.Rdata","simulation3.Rdata")
design <- c("Weak Separation", "Strong Separation", "Skewed Separation")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- paste("Outcome", i)
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
}
f
load(fin[f])
list.files()
fin1
fin[1]
fin <- c("simulation1.Rdata","simulation2.Rdata","simulation3.Rdata")
design <- c("Weak Separation", "Strong Separation", "Skewed Separation")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]]
temp <- melt(temp)
temp[,1] <- paste("Outcome", i)
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
}
head(dat)
tail(dat)
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~.V4)
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~V4)
?qplot
qplot(value, X2, data=dat, geom="boxplot") + facet_grid(X1~V4)
warnings()
qplot(X2, value, xlim = c(-2,6), data=dat, geom="boxplot") + facet_grid(X1~V4)
qplot(X2, value, ylim = c(-2,6), data=dat, geom="boxplot") + facet_grid(X1~V4)
qplot(X2, value, ylim = c(-2,6), data=dat, geom="boxplot") + facet_grid(V4~X1)
qplot(X2, value, ylim = c(-6,6), data=dat, geom="boxplot") + facet_grid(V4~X1)
qplot(X2, value, ylim = c(-6,6), data=dat, geom="boxplot") + facet_grid(V4~X1) + xlab("")
temp <- est.store[[i]][,-"MMTest"]
est.store[[1]]
est.store[[1]][,-c("MMTest")]
head(est.store[[1]])
library(ggplot2)
library(reshape)
dat <- data.frame()
fin <- c("simulation1.Rdata","simulation2.Rdata","simulation3.Rdata")
design <- c("Weak Separation", "Strong Separation", "Skewed Separation")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]][,-3] # remove MMTest column
temp <- melt(temp)
temp[,1] <- paste("Outcome", i)
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~V4)
dat <- data.frame()
fin <- c("simulation1.Rdata","simulation2.Rdata","simulation3.Rdata")
design <- c("Weak Separation", "Strong Separation", "Skewed Separation")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]][,-3] # remove MMTest column
temp <- melt(temp)
temp[,1] <- paste("Outcome", i)
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
}
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~V4)
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(X1~V4) + xlab("") + ylab("Avg Treatment Effect")
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect")
outcome <- c(": Linear", ": Moderately Nonlinear", ": Quadratic")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]][,-3] # remove MMTest column
temp <- melt(temp)
temp[,1] <- paste("Outcome ", i, outcome[i], sep="")
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
}
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect")
dat <- data.frame()
fin <- c("simulation1.Rdata","simulation2.Rdata","simulation3.Rdata")
design <- c("Weak Separation", "Strong Separation", "Skewed Separation")
outcome <- c(": Linear", ": Moderately Nonlinear", ": Quadratic")
for(f in 1:3){
load(fin[f])
for(i in 1:3){
temp <- est.store[[i]][,-3] # remove MMTest column
temp <- melt(temp)
temp[,1] <- paste("Outcome ", i, outcome[i], sep="")
temp[,4] <- rep(design[f], nrow(temp))
dat <- rbind(temp,dat)
}
}
qplot(X2, value, data=dat, geom="boxplot") + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect")
qplot(X2, value, data=dat, geom="boxplot", ylim = c(-5,6)) + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect")
qplot(X2, value, data=dat, geom="boxplot", ylim = c(-5,6)) + facet_grid(V4~X1) + xlab("")
+ ylab("Avg Treatment Effect") + opts(axis.text.x=theme_text(angle=-90))
qplot(X2, value, data=dat, geom="boxplot", ylim = c(-5,6)) + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect") + opts(axis.text.x=theme_text(angle=-90))
qplot(X2, value, data=dat, geom="boxplot", ylim = c(-5,6)) + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect") + theme(axis.text.x=theme_text(angle=-90))
qplot(X2, value, data=dat, geom="boxplot", ylim = c(-5,6)) + facet_grid(V4~X1) + xlab("") + ylab("Avg Treatment Effect") + theme(axis.text.x=element_text(angle=-90))
rm(list=ls())
