\documentclass[11pt]{article}
\title{Linear Model Simulations: Varying the Propensity Score}
\author{Kellie Ottoboni}

\usepackage{amsmath,amssymb,amsthm}
\usepackage{graphicx,float}
\usepackage[margin=0.75in]{geometry}
\usepackage{bm}
\usepackage[backend=bibtex]{biblatex}
\usepackage{hyperref}
\setlength{\parindent}{0cm}

\begin{document}

\maketitle
<<chunk1, echo=FALSE, results ='hide', message=F, warning=F>>=
library(knitr)
library(xtable)
library(ModelMatch)
library(reshape2)
library(ggplot2)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = 'hide', cache=FALSE)
@

Suppose $Y = X_1 + X_2 + \epsilon$, where $X_1, X_2$, and $\epsilon$ are all mutually independent, standard normal random variables. There is no effect of treatment. \\

Let treatment assignment $T$ be Bernoulli conditional on $X_1$, so that $\mathbb{P}(T = 1 \mid X_1 >= 0) = p_1$ and $\mathbb{P}(T = 1 \mid X_1 < 0) = p_2$. We'll vary $p_1$ and $p_2$. \\

Estimate $\hat{Y}$ using OLS with $X_1$ and $X_2$ as predictors. \\

<<setparameters>>=
set.seed(321)
B <- 5000
N <- 100
@

We have $N=$\Sexpr{N} individuals.  Suppose we use two strata, defined by whether $\hat{Y} \geq 0$ or $\hat{Y} < 0$.  We'll do the model-based matching permutation test using the difference in means as our statistic \Sexpr{B} times to get a distribution of p-values under the null hypothesis of no treatment effect. The simulations are done \textbf{conditionally on $X$ and $\epsilon$}: we draw $X_1$, $X_2$, and $\epsilon$ once to generate the potential outcomes $Y$, then randomly assign treatment for each simulation.

<<simulation_function>>=
simulate <- function(N, p1, p2, B = 1000, fit_correctly = TRUE){
  # Simulate strata with nonconstant propensity scores. No treatment effect
  # N = number of individuals
  # p1 = propensity score if X1 >= 0
  # p2 = propensity score if X1 < 0
  # B  = number of simulations. Default 1000
  # fit_correctly = indicator for how to model Y. If TRUE (default), fit Y~X1+X2. Otherwise, fit Y~X2.

  X1 <- rnorm(N)
  X2 <- rnorm(N)
  eps <- rnorm(N)
  Y <- X1 + X2 + eps

  Yhat <- lm(Y~X1+X2)$fitted
  if(fit_correctly == FALSE){
    Yhat <- lm(Y~X2)$fitted
  }
  stratum <- ifelse(Yhat >= 0, 1, 2)

  pvalues <- matrix(NA, nrow = B, ncol = 2)
  colnames(pvalues) <- c("Model-based Matching", "Unadjusted Permutation Test")
  for(b in 1:B){
    
    Tr <- rep(NA, length(X1))
    for(i in 1:length(X1)){
      if(X1[i] >= 0){
        Tr[i] <- rbinom(1, 1, p1)
      }else{
        Tr[i] <- rbinom(1, 1, p2)
      }
    }

    strata_list <- list(
    data.frame("index" = which(stratum == 1),
               "score" = Yhat[stratum == 1],
               "treatment" = Tr[stratum == 1]
               ),
    data.frame("index" = which(stratum == 2),
               "score" = Yhat[stratum == 2],
               "treatment" = Tr[stratum == 2]
               )
    )
  
    res <- permu_test_mean(strata = strata_list, prediction = Yhat, treatment = Tr,
                    response = Y)
    pvalues[b, 1] <- res$pvalue["twosided"]
    
    single_stratum <- list(do.call(rbind, strata_list))
    res2 <- permu_test_mean(strata = single_stratum, prediction = 0, treatment = Tr,
                    response = Y)
    pvalues[b, 2] <- res2$pvalue["twosided"]
    
  }

  return(pvalues)
}
@

<<plot_function>>=
compute_power <- function(pvalues){
  sapply((0:99)/100, function(p) mean(pvalues <= p, na.rm = TRUE))
}

plot_power_curves <- function(pvalues){
  # Input ``pvalues'' should be the output of simulate
  power_curves <- apply(pvalues, 2, compute_power)
  power_curves <- data.frame(cbind(power_curves,
                              "alpha" = (0:99)/100))
  power_curves_plot <- melt(power_curves, id.vars = "alpha", value.name = "power")
  ggplot(power_curves_plot, aes(x = alpha, y = power, color = variable)) +
    geom_line() +
    xlab("Significance level") +
    ylab("Pr(Reject Null)") +
    theme(legend.position = "bottom")
  }
@


\section{Constant propensity score}
This is like a randomized experiment where treatment is assigned by flipping an unbiased coin for everybody.

$$\mathbb{P}(T = 1 \mid X_1 >= 0) = \mathbb{P}(T = 1 \mid X_1 < 0) = 0.5$$


<<simulate, fig.align="center", fig.width=6, fig.height=6>>=
res1 <- simulate(100, 0.5, 0.5, B=B)
plot_power_curves(res1) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  ggtitle("Constant Propensity Scores")

@

<<sim_tab, results="asis">>=

prop_reject <- apply(res1, 2, function(x) mean(x<=0.05))

print(xtable(data.frame(prop_reject[2:1]),
      caption = "Proportion of tests rejected at level 0.05",
      digits = 3),
      include.rownames = TRUE,
      include.colnames = FALSE)
@


\section{Non-constant propensity score}

Now, we have vastly different propensity scores:

\begin{align*}
\mathbb{P}(T = 1 \mid X_1 >= 0) = 0.1 \\
\mathbb{P}(T = 1 \mid X_1 < 0)  = 0.9
\end{align*}


<<simulate2, fig.align="center", fig.width=6, fig.height=6>>=
res2 <- simulate(100, 0.1, 0.9, B=B)
plot_power_curves(res2) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  ggtitle("Unequal Propensity Scores")
prop_reject2 <- apply(res2, 2, function(x) mean(x<=0.05))
@

<<sim_tab2, results="asis">>=
print(xtable(data.frame(prop_reject2[2:1]),
      caption = "Proportion of tests rejected at level 0.05",
      digits = 3),
      include.rownames = TRUE,
      include.colnames = FALSE)
@


\section{Non-constant propensity score, inconsistent fit}

Assume the propensity scores from the previous section.  Now, suppose instead of fitting the correct model for $Y$, we estimate $\hat{Y}$ using only $X_2$.


<<simulate3, fig.align="center", fig.width=6, fig.height=6>>=
res3 <- simulate(100, 0.1, 0.9, B=B, fit_correctly = FALSE)
plot_power_curves(res3) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  ggtitle("Unequal Propensity Scores, Incorrect Yhat") +
  ylim(c(0, 1))
@


<<sim_tab3, results="asis">>=
prop_reject3 <- apply(res3, 2, function(x) mean(x<=0.05))
print(xtable(data.frame(prop_reject3[2:1]),
      caption = "Proportion of tests rejected at level 0.05",
      digits = 3),
      include.rownames = TRUE,
      include.colnames = FALSE)
@

\end{document}
